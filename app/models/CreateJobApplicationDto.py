# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models.BaseModel import BaseModel

applicantId = 'applicantId'
note = 'note'
jobOfferId = 'jobOfferId'


class CreateJobApplicationDto(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, new_applicant_id: int = None, new_note: str = None, new_job_offer_id: int = None):  # noqa: E501
        """CreateJobApplicationDto - a model defined in Swagger

        :param new_applicant_id: The applicant_id of this CreateJobApplicationDto.  # noqa: E501
        :type new_applicant_id: int
        :param new_note: The note of this CreateJobApplicationDto.  # noqa: E501
        :type new_note: str
        :param new_job_offer_id: The job_offer_id of this CreateJobApplicationDto.  # noqa: E501
        :type new_job_offer_id: int
        """
        self._data = {
            new_applicant_id: new_applicant_id,
            new_note: new_note,
            jobOfferId: new_job_offer_id
        }

    @classmethod
    def from_dict(cls, dikt) -> 'CreateJobApplicationDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateJobApplicationDto of this CreateJobApplicationDto.  # noqa: E501
        :rtype: CreateJobApplicationDto
        """
        instance = cls()
        instance.applicant_id = dikt[applicantId]
        instance.note = dikt[note]
        instance.job_offer_id = dikt[jobOfferId]
        return instance

    @property
    def applicant_id(self) -> int:
        """Gets the applicant_id of this CreateJobApplicationDto.


        :return: The applicant_id of this CreateJobApplicationDto.
        :rtype: int
        """
        return self._data[applicantId]

    @applicant_id.setter
    def applicant_id(self, new_applicant_id: int):
        """Sets the applicant_id of this CreateJobApplicationDto.


        :param new_applicant_id: The applicant_id of this CreateJobApplicationDto.
        :type new_applicant_id: int
        """
        if new_applicant_id is None:
            raise ValueError("Invalid value for `applicant_id`, must not be `None`")  # noqa: E501

        self._data[applicantId] = new_applicant_id

    @property
    def note(self) -> str:
        """Gets the note of this CreateJobApplicationDto.


        :return: The note of this CreateJobApplicationDto.
        :rtype: str
        """
        return self._data[note]

    @note.setter
    def note(self, new_note: str):
        """Sets the note of this CreateJobApplicationDto.


        :param new_note: The note of this CreateJobApplicationDto.
        :type new_note: str
        """
        if new_note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")  # noqa: E501

        self._data[note] = new_note

    @property
    def job_offer_id(self) -> int:
        """Gets the job_offer_id of this CreateJobApplicationDto.


        :return: The job_offer_id of this CreateJobApplicationDto.
        :rtype: int
        """
        return self._data[jobOfferId]

    @job_offer_id.setter
    def job_offer_id(self, new_job_offer_id: int):
        """Sets the job_offer_id of this CreateJobApplicationDto.


        :param new_job_offer_id: The job_offer_id of this CreateJobApplicationDto.
        :type new_job_offer_id: int
        """
        if new_job_offer_id is None:
            raise ValueError("Invalid value for `job_offer_id`, must not be `None`")  # noqa: E501

        self._data[jobOfferId] = new_job_offer_id
