# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models.BaseModel import BaseModel

id = 'id'
email = 'email'
birthDate = 'birthDate'
phoneNumber = 'phoneNumber'


class User(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, new_id: int = None, new_email: str = None, new_birth_date: date = None,
                 new_phone_number: str = None):  # noqa: E501
        """User - a model defined in Swagger

        :param new_id: The id of this User.  # noqa: E501
        :type new_id: int
        :param new_email: The email of this User.  # noqa: E501
        :type new_email: str
        :param new_birth_date: The birth_date of this User.  # noqa: E501
        :type new_birth_date: date
        :param new_phone_number: The phone_number of this User.  # noqa: E501
        :type new_phone_number: str
        """
        self._data = {
            id: new_id,
            email: new_email,
            birthDate: new_birth_date,
            phoneNumber: new_phone_number
        }

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        instance = cls()
        instance.id = dikt[id]
        instance.email = dikt[email]
        instance.birth_date = dikt[birthDate]
        instance.phone_number = dikt[phoneNumber]
        return instance

    @property
    def id(self) -> int:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: int
        """
        return self._data[id]

    @id.setter
    def id(self, new_id: int):
        """Sets the id of this User.


        :param new_id: The id of this User.
        :type new_id: int
        """

        self._data[id] = new_id

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._data[email]

    @email.setter
    def email(self, new_email: str):
        """Sets the email of this User.


        :param new_email: The email of this User.
        :type new_email: str
        """
        if new_email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._data[email] = new_email

    @property
    def birth_date(self) -> date:
        """Gets the birth_date of this User.


        :return: The birth_date of this User.
        :rtype: date
        """
        return self._data[birthDate]

    @birth_date.setter
    def birth_date(self, new_birth_date: date):
        """Sets the birth_date of this User.


        :param new_birth_date: The birth_date of this User.
        :type new_birth_date: date
        """
        if new_birth_date is None:
            raise ValueError("Invalid value for `birth_date`, must not be `None`")  # noqa: E501

        self._data[birthDate] = new_birth_date

    @property
    def phone_number(self) -> str:
        """Gets the phone_number of this User.


        :return: The phone_number of this User.
        :rtype: str
        """
        return self._data[phoneNumber]

    @phone_number.setter
    def phone_number(self, new_phone_number: str):
        """Sets the phone_number of this User.


        :param new_phone_number: The phone_number of this User.
        :type new_phone_number: str
        """

        self._data[phoneNumber] = new_phone_number
