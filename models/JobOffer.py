# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import CreateJobOfferDto
from models.BaseModel import BaseModel
from models.JobOfferState import JobOfferState  # noqa: F401,E501
from models.User import User  # noqa: F401,E501

id = 'id'
poster = 'poster'
companyName = 'companyName'
positionName = 'positionName'
description = 'description'
state = 'state'
dateCreated = 'dateCreated'
dateClosed = 'dateClosed'


class JobOffer(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, new_id: int = None, new_poster: User = None, new_company_name: str = None,
                 new_position_name: str = None, new_description: str = None, new_state: JobOfferState = None,
                 new_date_created: datetime = None, new_date_closed: datetime = None):  # noqa: E501
        """JobOffer - a model defined in Swagger

        :param new_id: The id of this JobOffer.  # noqa: E501
        :type new_id: int
        :param new_poster: The poster of this JobOffer.  # noqa: E501
        :type new_poster: User
        :param new_company_name: The company_name of this JobOffer.  # noqa: E501
        :type new_company_name: str
        :param new_position_name: The position_name of this JobOffer.  # noqa: E501
        :type new_position_name: str
        :param new_description: The description of this JobOffer.  # noqa: E501
        :type new_description: str
        :param new_state: The state of this JobOffer.  # noqa: E501
        :type new_state: JobOfferState
        :param new_date_created: The date_created of this JobOffer.  # noqa: E501
        :type new_date_created: datetime
        :param new_date_closed: The date_closed of this JobOffer.  # noqa: E501
        :type new_date_closed: datetime
        """
        self._data = {
            id: new_id,
            poster: new_poster,
            companyName: new_company_name,
            positionName: new_position_name,
            description: new_description,
            state: new_state,
            dateCreated: new_date_created,
            dateClosed: new_date_closed
        }

    @classmethod
    def from_dict(cls, dikt) -> 'JobOffer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobOffer of this JobOffer.  # noqa: E501
        :rtype: JobOffer
        """
        instance = cls()
        instance.id = dikt.get(id)
        instance.poster = User.from_dict(dikt.get(poster))
        instance.companyName = dikt.get(companyName)
        instance.positionName = dikt.get(positionName)
        instance.description = dikt.get(description)
        instance.state = dikt.get(state)
        instance.dateCreated = dikt.get(dateCreated)
        instance.dateClosed = dikt.get(dateClosed)
        return instance

    @classmethod
    def from_dto(cls, dto: CreateJobOfferDto) -> 'JobOffer':
        instance = cls()
        instance.company_name = dto.company_name
        instance.position_name = dto.position_name
        instance.description = dto.description
        return instance

    def to_dict(self) -> dict:
        """Returns the model as a dict

        :return: The dict of this JobOffer.  # noqa: E501
        :rtype: dict
        """
        dikt = dict(self._data)
        dikt[poster] = self.poster.to_dict()
        return dikt

    @property
    def id(self) -> int:
        """Gets the id of this JobOffer.


        :return: The id of this JobOffer.
        :rtype: int
        """
        return self._data[id]

    @id.setter
    def id(self, new_id: int):
        """Sets the id of this JobOffer.


        :param new_id: The id of this JobOffer.
        :type new_id: int
        """
        if new_id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._data[id] = new_id

    @property
    def poster(self) -> User:
        """Gets the poster of this JobOffer.


        :return: The poster of this JobOffer.
        :rtype: User
        """
        return self._data[poster]

    @poster.setter
    def poster(self, new_poster: User):
        """Sets the poster of this JobOffer.


        :param new_poster: The poster of this JobOffer.
        :type new_poster: User
        """
        if new_poster is None:
            raise ValueError("Invalid value for `poster`, must not be `None`")  # noqa: E501

        self._data[poster] = new_poster

    @property
    def company_name(self) -> str:
        """Gets the company_name of this JobOffer.


        :return: The company_name of this JobOffer.
        :rtype: str
        """
        return self._data[companyName]

    @company_name.setter
    def company_name(self, new_company_name: str):
        """Sets the company_name of this JobOffer.


        :param new_company_name: The company_name of this JobOffer.
        :type new_company_name: str
        """
        if new_company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._data[companyName] = new_company_name

    @property
    def position_name(self) -> str:
        """Gets the position_name of this JobOffer.


        :return: The position_name of this JobOffer.
        :rtype: str
        """
        return self._data[positionName]

    @position_name.setter
    def position_name(self, new_position_name: str):
        """Sets the position_name of this JobOffer.


        :param new_position_name: The position_name of this JobOffer.
        :type new_position_name: str
        """
        if new_position_name is None:
            raise ValueError("Invalid value for `position_name`, must not be `None`")  # noqa: E501

        self._data[positionName] = new_position_name

    @property
    def description(self) -> str:
        """Gets the description of this JobOffer.


        :return: The description of this JobOffer.
        :rtype: str
        """
        return self._data[description]

    @description.setter
    def description(self, new_description: str):
        """Sets the description of this JobOffer.


        :param new_description: The description of this JobOffer.
        :type new_description: str
        """
        if new_description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._data[description] = new_description

    @property
    def state(self) -> JobOfferState:
        """Gets the state of this JobOffer.


        :return: The state of this JobOffer.
        :rtype: JobOfferState
        """
        return self._data[state]

    @state.setter
    def state(self, new_state: JobOfferState):
        """Sets the state of this JobOffer.


        :param new_state: The state of this JobOffer.
        :type new_state: JobOfferState
        """

        self._data[state] = new_state

    @property
    def date_created(self) -> datetime:
        """Gets the date_created of this JobOffer.


        :return: The date_created of this JobOffer.
        :rtype: datetime
        """
        return self._data[dateCreated]

    @date_created.setter
    def date_created(self, new_date_created: datetime):
        """Sets the date_created of this JobOffer.


        :param new_date_created: The date_created of this JobOffer.
        :type new_date_created: datetime
        """

        self._data[dateCreated] = new_date_created

    @property
    def date_closed(self) -> datetime:
        """Gets the date_closed of this JobOffer.


        :return: The date_closed of this JobOffer.
        :rtype: datetime
        """
        return self._data[dateClosed]

    @date_closed.setter
    def date_closed(self, new_date_closed: datetime):
        """Sets the date_closed of this JobOffer.


        :param new_date_closed: The date_closed of this JobOffer.
        :type new_date_closed: datetime
        """

        self._data[dateClosed] = new_date_closed
