# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models.BaseModel import BaseModel

posterId = 'posterId'
companyName = 'companyName'
positionName = 'positionName'
description = 'description'


class CreateJobOfferDto(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, new_poster_id: int = None, new_company_name: str = None, new_position_name: str = None,
                 new_description: str = None):  # noqa: E501
        """CreateJobOfferDto - a model defined in Swagger

        :param new_poster_id: The poster_id of this CreateJobOfferDto.  # noqa: E501
        :type new_poster_id: int
        :param new_company_name: The company_name of this CreateJobOfferDto.  # noqa: E501
        :type new_company_name: str
        :param new_position_name: The position_name of this CreateJobOfferDto.  # noqa: E501
        :type new_position_name: str
        :param new_description: The description of this CreateJobOfferDto.  # noqa: E501
        :type new_description: str
        """
        self._data = {
            posterId: new_poster_id,
            companyName: new_company_name,
            positionName: new_position_name,
            description: new_description
        }

    @classmethod
    def from_dict(cls, dikt) -> 'CreateJobOfferDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateJobOfferDto of this CreateJobOfferDto.  # noqa: E501
        :rtype: CreateJobOfferDto
        """
        instance = cls()
        instance.poster_id = dikt[posterId]
        instance.company_name = dikt[companyName]
        instance.position_name = dikt[positionName]
        instance.description = dikt[description]
        return instance

    @property
    def poster_id(self) -> int:
        """Gets the poster_id of this CreateJobOfferDto.


        :return: The poster_id of this CreateJobOfferDto.
        :rtype: int
        """
        return self._data[posterId]

    @poster_id.setter
    def poster_id(self, new_poster_id: int):
        """Sets the poster_id of this CreateJobOfferDto.


        :param new_poster_id: The poster_id of this CreateJobOfferDto.
        :type new_poster_id: int
        """
        if new_poster_id is None:
            raise ValueError("Invalid value for `poster_id`, must not be `None`")  # noqa: E501

        self._data[posterId] = new_poster_id

    @property
    def company_name(self) -> str:
        """Gets the company_name of this CreateJobOfferDto.


        :return: The company_name of this CreateJobOfferDto.
        :rtype: str
        """
        return self._data[companyName]

    @company_name.setter
    def company_name(self, new_company_name: str):
        """Sets the company_name of this CreateJobOfferDto.


        :param new_company_name: The company_name of this CreateJobOfferDto.
        :type new_company_name: str
        """
        if new_company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._data[companyName] = new_company_name

    @property
    def position_name(self) -> str:
        """Gets the position_name of this CreateJobOfferDto.


        :return: The position_name of this CreateJobOfferDto.
        :rtype: str
        """
        return self._data[positionName]

    @position_name.setter
    def position_name(self, position_name: str):
        """Sets the position_name of this CreateJobOfferDto.


        :param position_name: The position_name of this CreateJobOfferDto.
        :type position_name: str
        """
        if position_name is None:
            raise ValueError("Invalid value for `position_name`, must not be `None`")  # noqa: E501

        self._data[positionName] = position_name

    @property
    def description(self) -> str:
        """Gets the description of this CreateJobOfferDto.


        :return: The description of this CreateJobOfferDto.
        :rtype: str
        """
        return self._data[description]

    @description.setter
    def description(self, new_description: str):
        """Sets the description of this CreateJobOfferDto.


        :param new_description: The description of this CreateJobOfferDto.
        :type new_description: str
        """
        if new_description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._data[description] = new_description
