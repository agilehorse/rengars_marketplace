# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from rengars_marketplace import util
from rengars_marketplace.models.BaseModel import BaseModel


class User(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int = None, email: str = None, birth_date: date = None,
                 phone_number: str = None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: int
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param birth_date: The birth_date of this User.  # noqa: E501
        :type birth_date: date
        :param phone_number: The phone_number of this User.  # noqa: E501
        :type phone_number: str
        """
        self.swagger_types = {
            'id': int,
            'email': str,
            'birth_date': date,
            'phone_number': str
        }

        self.attribute_map = {
            'id': 'id',
            'email': 'email',
            'birth_date': 'birthDate',
            'phone_number': 'phoneNumber'
        }
        self._id = id
        self._email = email
        self._birth_date = birth_date
        self._phone_number = phone_number

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def birth_date(self) -> date:
        """Gets the birth_date of this User.


        :return: The birth_date of this User.
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date: date):
        """Sets the birth_date of this User.


        :param birth_date: The birth_date of this User.
        :type birth_date: date
        """
        if birth_date is None:
            raise ValueError("Invalid value for `birth_date`, must not be `None`")  # noqa: E501

        self._birth_date = birth_date

    @property
    def phone_number(self) -> str:
        """Gets the phone_number of this User.


        :return: The phone_number of this User.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number: str):
        """Sets the phone_number of this User.


        :param phone_number: The phone_number of this User.
        :type phone_number: str
        """

        self._phone_number = phone_number
