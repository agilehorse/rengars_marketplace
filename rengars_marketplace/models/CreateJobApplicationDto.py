# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from rengars_marketplace import util
from rengars_marketplace.models.Model import Model


class CreateJobApplicationDto(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, applicant_id: int = None, note: str = None, job_offer_id: int = None):  # noqa: E501
        """CreateJobApplicationDto - a model defined in Swagger

        :param applicant_id: The applicant_id of this CreateJobApplicationDto.  # noqa: E501
        :type applicant_id: int
        :param note: The note of this CreateJobApplicationDto.  # noqa: E501
        :type note: str
        :param job_offer_id: The job_offer_id of this CreateJobApplicationDto.  # noqa: E501
        :type job_offer_id: int
        """
        self.swagger_types = {
            'applicant_id': int,
            'note': str,
            'job_offer_id': int
        }

        self.attribute_map = {
            'applicant_id': 'applicantId',
            'note': 'note',
            'job_offer_id': 'jobOfferId'
        }
        self._applicant_id = applicant_id
        self._note = note
        self._job_offer_id = job_offer_id

    @classmethod
    def from_dict(cls, dikt) -> 'CreateJobApplicationDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateJobApplicationDto of this CreateJobApplicationDto.  # noqa: E501
        :rtype: CreateJobApplicationDto
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicant_id(self) -> int:
        """Gets the applicant_id of this CreateJobApplicationDto.


        :return: The applicant_id of this CreateJobApplicationDto.
        :rtype: int
        """
        return self._applicant_id

    @applicant_id.setter
    def applicant_id(self, applicant_id: int):
        """Sets the applicant_id of this CreateJobApplicationDto.


        :param applicant_id: The applicant_id of this CreateJobApplicationDto.
        :type applicant_id: int
        """
        if applicant_id is None:
            raise ValueError("Invalid value for `applicant_id`, must not be `None`")  # noqa: E501

        self._applicant_id = applicant_id

    @property
    def note(self) -> str:
        """Gets the note of this CreateJobApplicationDto.


        :return: The note of this CreateJobApplicationDto.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note: str):
        """Sets the note of this CreateJobApplicationDto.


        :param note: The note of this CreateJobApplicationDto.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")  # noqa: E501

        self._note = note

    @property
    def job_offer_id(self) -> int:
        """Gets the job_offer_id of this CreateJobApplicationDto.


        :return: The job_offer_id of this CreateJobApplicationDto.
        :rtype: int
        """
        return self._job_offer_id

    @job_offer_id.setter
    def job_offer_id(self, job_offer_id: int):
        """Sets the job_offer_id of this CreateJobApplicationDto.


        :param job_offer_id: The job_offer_id of this CreateJobApplicationDto.
        :type job_offer_id: int
        """
        if job_offer_id is None:
            raise ValueError("Invalid value for `job_offer_id`, must not be `None`")  # noqa: E501

        self._job_offer_id = job_offer_id
