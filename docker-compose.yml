version: '3'

services:

  flask:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MARKETPLACE_PORT: ${MARKETPLACE_PORT}
    container_name: flask
    image: python:3.9.4-alpine
    restart: unless-stopped
    environment:
      APP_ENV: ${APP_ENV}
      APP_DEBUG: "False"
      MARKETPLACE_PORT: ${MARKETPLACE_PORT}
      EUREKA_URL: ${EUREKA_URL}
      RABBIT_URL: ${RABBIT_URL}
      RABBIT_EXCHANGE: ${RABBIT_EXCHANGE}
      MONGODB_DATABASE: ${MONGODB_DATABASE}
      MONGODB_USERNAME: ${MONGODB_USERNAME}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      MONGODB_HOSTNAME: ${MONGODB_HOSTNAME}
    volumes:
      - appdata:/var/www
    depends_on:
      - mongodb
    networks:
      - frontend
      - backend

  mongodb:
    image: mongo:4.0.8
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - "./mongo-init/:/docker-entrypoint-initdb.d/"
      - mongodbdata:/data/db
    networks:
      - backend

  webserver:
    build:
      context: nginx
      dockerfile: Dockerfile
      args:
        BUILD_TYPE: ${APP_ENV}
    image: digitalocean.com/webserver:latest
    container_name: webserver
    restart: unless-stopped
    environment:
      APP_ENV: ${APP_ENV}
      APP_NAME: "webserver"
      APP_DEBUG: "true"
      SERVICE_NAME: "webserver"
    ports:
      - "81:81"
      - "444:444"
    volumes:
      - nginxdata:/var/log/nginx
    depends_on:
      - flask
    networks:
      - frontend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodbdata:
    driver: local
  appdata:
    driver: local
  nginxdata:
    driver: local